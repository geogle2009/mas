package com.mingda.model;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DiagnoseTypeExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table MEDICAL.DIAGNOSE_TYPE
     *
     * @ibatorgenerated Mon Aug 12 12:19:57 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table MEDICAL.DIAGNOSE_TYPE
     *
     * @ibatorgenerated Mon Aug 12 12:19:57 CST 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table MEDICAL.DIAGNOSE_TYPE
     *
     * @ibatorgenerated Mon Aug 12 12:19:57 CST 2013
     */
    public DiagnoseTypeExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table MEDICAL.DIAGNOSE_TYPE
     *
     * @ibatorgenerated Mon Aug 12 12:19:57 CST 2013
     */
    protected DiagnoseTypeExample(DiagnoseTypeExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table MEDICAL.DIAGNOSE_TYPE
     *
     * @ibatorgenerated Mon Aug 12 12:19:57 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table MEDICAL.DIAGNOSE_TYPE
     *
     * @ibatorgenerated Mon Aug 12 12:19:57 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table MEDICAL.DIAGNOSE_TYPE
     *
     * @ibatorgenerated Mon Aug 12 12:19:57 CST 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table MEDICAL.DIAGNOSE_TYPE
     *
     * @ibatorgenerated Mon Aug 12 12:19:57 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table MEDICAL.DIAGNOSE_TYPE
     *
     * @ibatorgenerated Mon Aug 12 12:19:57 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table MEDICAL.DIAGNOSE_TYPE
     *
     * @ibatorgenerated Mon Aug 12 12:19:57 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table MEDICAL.DIAGNOSE_TYPE
     *
     * @ibatorgenerated Mon Aug 12 12:19:57 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table MEDICAL.DIAGNOSE_TYPE
     *
     * @ibatorgenerated Mon Aug 12 12:19:57 CST 2013
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andDiagnoseTypeIdIsNull() {
            addCriterion("DIAGNOSE_TYPE_ID is null");
            return this;
        }

        public Criteria andDiagnoseTypeIdIsNotNull() {
            addCriterion("DIAGNOSE_TYPE_ID is not null");
            return this;
        }

        public Criteria andDiagnoseTypeIdEqualTo(Integer value) {
            addCriterion("DIAGNOSE_TYPE_ID =", value, "diagnoseTypeId");
            return this;
        }

        public Criteria andDiagnoseTypeIdNotEqualTo(Integer value) {
            addCriterion("DIAGNOSE_TYPE_ID <>", value, "diagnoseTypeId");
            return this;
        }

        public Criteria andDiagnoseTypeIdGreaterThan(Integer value) {
            addCriterion("DIAGNOSE_TYPE_ID >", value, "diagnoseTypeId");
            return this;
        }

        public Criteria andDiagnoseTypeIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("DIAGNOSE_TYPE_ID >=", value, "diagnoseTypeId");
            return this;
        }

        public Criteria andDiagnoseTypeIdLessThan(Integer value) {
            addCriterion("DIAGNOSE_TYPE_ID <", value, "diagnoseTypeId");
            return this;
        }

        public Criteria andDiagnoseTypeIdLessThanOrEqualTo(Integer value) {
            addCriterion("DIAGNOSE_TYPE_ID <=", value, "diagnoseTypeId");
            return this;
        }

        public Criteria andDiagnoseTypeIdIn(List<Integer> values) {
            addCriterion("DIAGNOSE_TYPE_ID in", values, "diagnoseTypeId");
            return this;
        }

        public Criteria andDiagnoseTypeIdNotIn(List<Integer> values) {
            addCriterion("DIAGNOSE_TYPE_ID not in", values, "diagnoseTypeId");
            return this;
        }

        public Criteria andDiagnoseTypeIdBetween(Integer value1, Integer value2) {
            addCriterion("DIAGNOSE_TYPE_ID between", value1, value2, "diagnoseTypeId");
            return this;
        }

        public Criteria andDiagnoseTypeIdNotBetween(Integer value1, Integer value2) {
            addCriterion("DIAGNOSE_TYPE_ID not between", value1, value2, "diagnoseTypeId");
            return this;
        }

        public Criteria andOrganizationIdIsNull() {
            addCriterion("ORGANIZATION_ID is null");
            return this;
        }

        public Criteria andOrganizationIdIsNotNull() {
            addCriterion("ORGANIZATION_ID is not null");
            return this;
        }

        public Criteria andOrganizationIdEqualTo(String value) {
            addCriterion("ORGANIZATION_ID =", value, "organizationId");
            return this;
        }

        public Criteria andOrganizationIdNotEqualTo(String value) {
            addCriterion("ORGANIZATION_ID <>", value, "organizationId");
            return this;
        }

        public Criteria andOrganizationIdGreaterThan(String value) {
            addCriterion("ORGANIZATION_ID >", value, "organizationId");
            return this;
        }

        public Criteria andOrganizationIdGreaterThanOrEqualTo(String value) {
            addCriterion("ORGANIZATION_ID >=", value, "organizationId");
            return this;
        }

        public Criteria andOrganizationIdLessThan(String value) {
            addCriterion("ORGANIZATION_ID <", value, "organizationId");
            return this;
        }

        public Criteria andOrganizationIdLessThanOrEqualTo(String value) {
            addCriterion("ORGANIZATION_ID <=", value, "organizationId");
            return this;
        }

        public Criteria andOrganizationIdLike(String value) {
            addCriterion("ORGANIZATION_ID like", value, "organizationId");
            return this;
        }

        public Criteria andOrganizationIdNotLike(String value) {
            addCriterion("ORGANIZATION_ID not like", value, "organizationId");
            return this;
        }

        public Criteria andOrganizationIdIn(List<String> values) {
            addCriterion("ORGANIZATION_ID in", values, "organizationId");
            return this;
        }

        public Criteria andOrganizationIdNotIn(List<String> values) {
            addCriterion("ORGANIZATION_ID not in", values, "organizationId");
            return this;
        }

        public Criteria andOrganizationIdBetween(String value1, String value2) {
            addCriterion("ORGANIZATION_ID between", value1, value2, "organizationId");
            return this;
        }

        public Criteria andOrganizationIdNotBetween(String value1, String value2) {
            addCriterion("ORGANIZATION_ID not between", value1, value2, "organizationId");
            return this;
        }

        public Criteria andDiagnoseTypeNameIsNull() {
            addCriterion("DIAGNOSE_TYPE_NAME is null");
            return this;
        }

        public Criteria andDiagnoseTypeNameIsNotNull() {
            addCriterion("DIAGNOSE_TYPE_NAME is not null");
            return this;
        }

        public Criteria andDiagnoseTypeNameEqualTo(String value) {
            addCriterion("DIAGNOSE_TYPE_NAME =", value, "diagnoseTypeName");
            return this;
        }

        public Criteria andDiagnoseTypeNameNotEqualTo(String value) {
            addCriterion("DIAGNOSE_TYPE_NAME <>", value, "diagnoseTypeName");
            return this;
        }

        public Criteria andDiagnoseTypeNameGreaterThan(String value) {
            addCriterion("DIAGNOSE_TYPE_NAME >", value, "diagnoseTypeName");
            return this;
        }

        public Criteria andDiagnoseTypeNameGreaterThanOrEqualTo(String value) {
            addCriterion("DIAGNOSE_TYPE_NAME >=", value, "diagnoseTypeName");
            return this;
        }

        public Criteria andDiagnoseTypeNameLessThan(String value) {
            addCriterion("DIAGNOSE_TYPE_NAME <", value, "diagnoseTypeName");
            return this;
        }

        public Criteria andDiagnoseTypeNameLessThanOrEqualTo(String value) {
            addCriterion("DIAGNOSE_TYPE_NAME <=", value, "diagnoseTypeName");
            return this;
        }

        public Criteria andDiagnoseTypeNameLike(String value) {
            addCriterion("DIAGNOSE_TYPE_NAME like", value, "diagnoseTypeName");
            return this;
        }

        public Criteria andDiagnoseTypeNameNotLike(String value) {
            addCriterion("DIAGNOSE_TYPE_NAME not like", value, "diagnoseTypeName");
            return this;
        }

        public Criteria andDiagnoseTypeNameIn(List<String> values) {
            addCriterion("DIAGNOSE_TYPE_NAME in", values, "diagnoseTypeName");
            return this;
        }

        public Criteria andDiagnoseTypeNameNotIn(List<String> values) {
            addCriterion("DIAGNOSE_TYPE_NAME not in", values, "diagnoseTypeName");
            return this;
        }

        public Criteria andDiagnoseTypeNameBetween(String value1, String value2) {
            addCriterion("DIAGNOSE_TYPE_NAME between", value1, value2, "diagnoseTypeName");
            return this;
        }

        public Criteria andDiagnoseTypeNameNotBetween(String value1, String value2) {
            addCriterion("DIAGNOSE_TYPE_NAME not between", value1, value2, "diagnoseTypeName");
            return this;
        }

        public Criteria andScalerIsNull() {
            addCriterion("SCALER is null");
            return this;
        }

        public Criteria andScalerIsNotNull() {
            addCriterion("SCALER is not null");
            return this;
        }

        public Criteria andScalerEqualTo(BigDecimal value) {
            addCriterion("SCALER =", value, "scaler");
            return this;
        }

        public Criteria andScalerNotEqualTo(BigDecimal value) {
            addCriterion("SCALER <>", value, "scaler");
            return this;
        }

        public Criteria andScalerGreaterThan(BigDecimal value) {
            addCriterion("SCALER >", value, "scaler");
            return this;
        }

        public Criteria andScalerGreaterThanOrEqualTo(BigDecimal value) {
            addCriterion("SCALER >=", value, "scaler");
            return this;
        }

        public Criteria andScalerLessThan(BigDecimal value) {
            addCriterion("SCALER <", value, "scaler");
            return this;
        }

        public Criteria andScalerLessThanOrEqualTo(BigDecimal value) {
            addCriterion("SCALER <=", value, "scaler");
            return this;
        }

        public Criteria andScalerIn(List<BigDecimal> values) {
            addCriterion("SCALER in", values, "scaler");
            return this;
        }

        public Criteria andScalerNotIn(List<BigDecimal> values) {
            addCriterion("SCALER not in", values, "scaler");
            return this;
        }

        public Criteria andScalerBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("SCALER between", value1, value2, "scaler");
            return this;
        }

        public Criteria andScalerNotBetween(BigDecimal value1, BigDecimal value2) {
            addCriterion("SCALER not between", value1, value2, "scaler");
            return this;
        }

        public Criteria andSeqIsNull() {
            addCriterion("SEQ is null");
            return this;
        }

        public Criteria andSeqIsNotNull() {
            addCriterion("SEQ is not null");
            return this;
        }

        public Criteria andSeqEqualTo(Integer value) {
            addCriterion("SEQ =", value, "seq");
            return this;
        }

        public Criteria andSeqNotEqualTo(Integer value) {
            addCriterion("SEQ <>", value, "seq");
            return this;
        }

        public Criteria andSeqGreaterThan(Integer value) {
            addCriterion("SEQ >", value, "seq");
            return this;
        }

        public Criteria andSeqGreaterThanOrEqualTo(Integer value) {
            addCriterion("SEQ >=", value, "seq");
            return this;
        }

        public Criteria andSeqLessThan(Integer value) {
            addCriterion("SEQ <", value, "seq");
            return this;
        }

        public Criteria andSeqLessThanOrEqualTo(Integer value) {
            addCriterion("SEQ <=", value, "seq");
            return this;
        }

        public Criteria andSeqIn(List<Integer> values) {
            addCriterion("SEQ in", values, "seq");
            return this;
        }

        public Criteria andSeqNotIn(List<Integer> values) {
            addCriterion("SEQ not in", values, "seq");
            return this;
        }

        public Criteria andSeqBetween(Integer value1, Integer value2) {
            addCriterion("SEQ between", value1, value2, "seq");
            return this;
        }

        public Criteria andSeqNotBetween(Integer value1, Integer value2) {
            addCriterion("SEQ not between", value1, value2, "seq");
            return this;
        }
    }
}